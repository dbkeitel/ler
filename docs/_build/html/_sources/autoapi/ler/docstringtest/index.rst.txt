:py:mod:`ler.docstringtest`
===========================

.. py:module:: ler.docstringtest

.. autoapi-nested-parse::

   Example Python module with Numpydoc-formatted docstrings.

   This module demonstrates documentation written according to LSST DM's
   guidelines for `Documenting Python APIs with Docstrings`_. Docstrings have
   well-specified sections. This paragraph is considered an `Extended
   Summary`_. Permitted sections are listed in `Numpydoc Sections in Docstrings`_.
   You can't add arbitrary sections since they won't be parsed.

   Notes
   -----
   Usually we don't write extensive module docstrings. Focus the module docstring
   on information that a Stack developer needs to know when working inside that
   module. Module *users* typically won't see module docstrings (instead they will
   read module documentation topics written in the package's ``doc/`` directory).

   .. _`Documenting Python APIs with Docstrings`:
      https://developer.lsst.io/docs/py_docs.html
   .. _`Extended Summary`:
      https://developer.lsst.io/docs/py_docs.html#py-docstring-extended-summary
   .. _`Numpydoc Sections in Docstrings`:
      https://developer.lsst.io/docs/py_docs.html#py-docstring-sections

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ler.docstringtest.ExampleClass



Functions
~~~~~~~~~

.. autoapisummary::

   ler.docstringtest.moduleLevelFunction
   ler.docstringtest.exampleGenerator



Attributes
~~~~~~~~~~

.. autoapisummary::

   ler.docstringtest.MODULE_LEVEL_VARIABLE


.. py:data:: MODULE_LEVEL_VARIABLE
   :value: 12345

   
   Module level variable documented inline (`int`).

   The module variable's type is specified in the short summary, as shown above.
   Module variables (constants) can have extended descriptions, like this
   paragraph. For a complete list of sections permitted in constant docstrings see
   `Documenting Constants and Class Attributes`_.

   .. _`Documenting Constants and Class Attributes`:
      https://developer.lsst.io/docs/py_docs.html#py-docstring-attribute-constants-structure















   ..
       !! processed by numpydoc !!

.. py:function:: moduleLevelFunction(param1, param2=None, *args, **kwargs)

   
   Test that two parameters are not equal.

   .. math::
       \sum_{i=1}^{\infty} x_{i}

   This is an example of a function docstring. Function parameters are
   documented in the ``Parameters`` section. See *Notes* for the format
   specification. See `Documenting Methods and Functions`_ for more
   information about function docstrings.

   :Parameters:

       **param1** : `int`
           The first parameter. Note how the type is marked up with backticks.
           This marks ``int`` as an API object so that Sphinx will attempt to
           link to its reference documentation. You can do this for custom types
           as well. You'll see an example in the `Returns`_ documentation.

       **param2** : `str`, optional
           Optional arguments (those with defaults) always include the word
           ``optional`` after the type info. See the `Parameters`_ section
           documentation for details.

       **\*args**
           Variable length argument list.

       **\*\*kwargs**
           Arbitrary keyword arguments. If you do accept ``**kwargs``, make sure
           you link to documentation that describes what keywords are accepted,
           or list the keyword arguments here:
           
           - ``key1``: description (`int`).
           - ``key2``: description (`str`).

   :Returns:

       **success** : `bool`
           `True` if successful, `False` otherwise.
           
           The return type is not optional. The ``Returns`` section may span
           multiple lines and paragraphs. Following lines should be indented to
           match the first line of the description.
           
           The ``Returns`` section supports any reStructuredText formatting,
           including literal blocks::
           
               {
                   'param1': param1,
                   'param2': param2
               }
           
           See the `Returns`_ section documentation for details.




   :Raises:

       AttributeError
           Raised if <insert situation>.

       ValueError
           Raised if <insert situation>. See the `Raises`_ section documentation
           for details.



   .. seealso::

       
       :obj:`exampleGenerator`
           ..
       :obj:`ExampleClass`
           ..
       
   .. rubric:: Notes

   If ``*args`` or ``**kwargs`` are accepted, they should be listed as
   ``*args`` and ``**kwargs``.

   The format for a parameter is::

       name : type
           Description.

           The description may span multiple lines. Following lines
           should be indented to match the first line of the description.

           Multiple paragraphs are supported in parameter descriptions.


   .. rubric:: Examples

   If possible, include an API usage example using the doctest format:

   >>> moduleLevelFunction('Hello', param2='World')
   True

   See the `Examples`_ section reference for details.

   .. _`Documenting Methods and Functions`:
      py-docstring-method-function-structure
   .. _`Parameters`:
      https://developer.lsst.io/docs/py_docs.html#py-docstring-parameters
   .. _`Returns`:
      https://developer.lsst.io/docs/py_docs.html#py-docstring-returns
   .. _`Raises`:
      https://developer.lsst.io/docs/py_docs.html#py-docstring-raises
   .. _`Examples`:
      https://developer.lsst.io/docs/py_docs.html#py-docstring-examples



   ..
       !! processed by numpydoc !!

.. py:function:: exampleGenerator(n)

   
   Generate an increasing sequence of numbers from 0 to a given limit.

   Generators have a ``Yields`` section instead of a ``Returns`` section.

   :Parameters:

       **n** : `int`
           The upper limit of the range to generate, from 0 to ``n`` - 1.


   :Yields:

       **number** : `int`
           The next number in the range of 0 to ``n`` - 1.






   .. seealso::

       
       :obj:`moduleLevelFunction`
           ..
       


   .. rubric:: Examples

   Examples should be written in doctest format, and should illustrate how to
   use the function:

   >>> print([i for i in example_generator(4)])
   [0, 1, 2, 3]



   ..
       !! processed by numpydoc !!

.. py:class:: ExampleClass(param1, param2, param3=None)

   Bases: :py:obj:`object`

   
   Example class.


   :Parameters:

       **param1** : `str`
           Description of ``param1``.

       **param2** : `list` of `str`
           Description of ``param2``.

       **param3** : `int`, optional
           Description of ``param3``.














   ..
       !! processed by numpydoc !!
   .. py:property:: readonlyProperty

      
      Properties are documented in their getter method (`str`, read-only).
















      ..
          !! processed by numpydoc !!

   .. py:property:: readwriteProperty

      
      Properties with both a getter and setter are documented in their
      getter method (`list` of `str`).

      If the setter method contains notable behavior, it should be mentioned
      here as well.















      ..
          !! processed by numpydoc !!

   .. py:attribute:: attr1

      
      Description of ``attr1`` (`str`).
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: attr2

      
      Description of ``attr2`` (`list` of `str`).
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: attr3

      
      Description of ``attr3`` (`int`).
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: attr4

      
      Description of ``attr4`` (`list` of `str`).
















      ..
          !! processed by numpydoc !!

   .. py:method:: exampleMethod(param1, param2)

      
      Test that a situation is true.

      Class methods are similar to regular functions. Always use the
      imperative mood when writing the one-sentence summary of a method or
      function.

      :Parameters:

          **param1** : obj
              The first parameter.

          **param2** : obj
              The second parameter.

      :Returns:

          **success** : `bool`
              `True` if successful, `False` otherwise.








      .. rubric:: Notes

      Do not include the ``self`` parameter in the ``Parameters`` section.





      ..
          !! processed by numpydoc !!


.. py:exception:: ExampleError(msg, code=None)

   Bases: :py:obj:`Exception`

   
   Example exception.

   Exceptions are documented in the same manner as other classes.

   :Parameters:

       **msg** : `str`
           Human readable string describing the exception.

       **code** : `int`, optional
           Numeric error code.









   .. rubric:: Notes

   Do not include the ``self`` parameter in the ``Parameters`` section.





   ..
       !! processed by numpydoc !!
   .. py:attribute:: msg

      
      Human readable string describing the exception (`str`).
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: code

      
      Numeric error code (`int`).
















      ..
          !! processed by numpydoc !!


