:py:mod:`ler.utils.utils`
=========================

.. py:module:: ler.utils.utils

.. autoapi-nested-parse::

   This module contains helper routines for other modules in the ler package.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ler.utils.utils.NumpyEncoder



Functions
~~~~~~~~~

.. autoapisummary::

   ler.utils.utils.update_dict
   ler.utils.utils.load_json
   ler.utils.utils.append_json
   ler.utils.utils.get_param_from_json
   ler.utils.utils.dict_inside_dict_to_array
   ler.utils.utils.rejection_sample
   ler.utils.utils.add_dictionaries_together
   ler.utils.utils.trim_dictionary
   ler.utils.utils.create_conditioned_pdf_invcdf
   ler.utils.utils.interpolator_from_pickle
   ler.utils.utils.interpolator_pickle_path
   ler.utils.utils.interpolator_pdf_conditioned
   ler.utils.utils.interpolator_sampler_conditioned
   ler.utils.utils.batch_handler



.. py:class:: NumpyEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)


   Bases: :py:obj:`json.JSONEncoder`

   
   class for storing a numpy.ndarray or any nested-list composition as JSON file


   :Parameters:

       **json.JSONEncoder** : `class`
           class for encoding JSON file

   :Returns:

       **json.JSONEncoder.default** : `function`
           function for encoding JSON file













   ..
       !! processed by numpydoc !!
   .. py:method:: default(obj)

      
      function for encoding JSON file
















      ..
          !! processed by numpydoc !!


.. py:function:: update_dict(old, new)

   
   Update a dictionary with keys and values.
















   ..
       !! processed by numpydoc !!

.. py:function:: load_json(file_name)

   
   Load a json file.


   :Parameters:

       **file_name** : `str`
           json file name for storing the parameters.

   :Returns:

       **param** : `dict`
           ..













   ..
       !! processed by numpydoc !!

.. py:function:: append_json(file_name, dictionary, replace=False)

   
   Append and update a json file with a dictionary.


   :Parameters:

       **file_name** : `str`
           json file name for storing the parameters.

       **dictionary** : `dict`
           dictionary to be appended to the json file.

       **replace** : `bool`, optional
           If True, replace the json file with the dictionary. Default is False.














   ..
       !! processed by numpydoc !!

.. py:function:: get_param_from_json(json_file)

   
   Function to get the parameters from json file.


   :Parameters:

       **json_file** : `str`
           json file name for storing the parameters.

   :Returns:

       **param** : `dict`
           ..













   ..
       !! processed by numpydoc !!

.. py:function:: dict_inside_dict_to_array(dictionary)

   
   Function to convert a dictionary to an array.
















   ..
       !! processed by numpydoc !!

.. py:function:: rejection_sample(pdf, xmin, xmax, size=100, chunk_size=10000)

   
   Helper function for rejection sampling from a pdf with maximum and minimum arguments.
   Input parameters:
       pdf: the pdf to sample from
       xmin: the minimum argument of the pdf
       xmax: the maximum argument of the pdf
       size: the number of samples to draw
   Output:
       samples: the samples drawn from the pdf
















   ..
       !! processed by numpydoc !!

.. py:function:: add_dictionaries_together(dictionary1, dictionary2)

   
   Adds two dictionaries with the same keys together.
















   ..
       !! processed by numpydoc !!

.. py:function:: trim_dictionary(dictionary, size)

   
   Filters an event dictionary to only contain the size.
















   ..
       !! processed by numpydoc !!

.. py:function:: create_conditioned_pdf_invcdf(x, conditioned_y, pdf_func, category)

   
   pdf_func is the function to calculate the pdf of x given y
   x is an array and the output of pdf_func is an array
   y is the condition
   we consider parameter plane of x and y
















   ..
       !! processed by numpydoc !!

.. py:function:: interpolator_from_pickle(param_dict_given, directory, sub_directory, name, x, pdf_func=None, y=None, conditioned_y=None, dimension=1, category='pdf', create_new=False)

   
   Function to decide which interpolator to use.
















   ..
       !! processed by numpydoc !!

.. py:function:: interpolator_pickle_path(param_dict_given, directory, sub_directory, interpolator_name)

   
   Function to create the interpolator pickle file path for velocity dispersion.
















   ..
       !! processed by numpydoc !!

.. py:function:: interpolator_pdf_conditioned(x, conditioned_y, y_array, interpolator_list)

   
   Function to sample from the interpolator
















   ..
       !! processed by numpydoc !!

.. py:function:: interpolator_sampler_conditioned(conditioned_y, y_array, interpolator_list, size=1000)

   
   Function sampler with inverse cdf from the interpolator
















   ..
       !! processed by numpydoc !!

.. py:function:: batch_handler(size, batch_size, sampling_routine, output_jsonfile, resume=False)

   
   Function to run the sampling in batches.


   :Parameters:

       **size** : `int`
           number of samples.

       **batch_size** : `int`
           batch size.

       **sampling_routine** : `function`
           function to sample the parameters.
           e.g. unlensed_sampling_routine() or lensed_sampling_routine()

       **output_jsonfile** : `str`
           name of the json file to store the parameters.

       **resume** : `bool`
           if True, it will resume the sampling from the last batch.
           default resume = False.














   ..
       !! processed by numpydoc !!

