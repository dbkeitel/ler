:orphan:

:py:mod:`ler`
=============

.. py:module:: ler


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   helperroutines/index.rst
   ler/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   ler.LeR
   ler.SourceGalaxyPopulationModel
   ler.CompactBinaryPopulation



Functions
~~~~~~~~~

.. autoapisummary::

   ler.solve_lens_equation1
   ler.solve_lens_equation2
   ler.add_dictionaries_together
   ler.rejection_sample



.. py:class:: LeR(nsamples=100000, npool=int(4), z_min=0.0, z_max=10.0, batch_size=25000, snr_finder='gwsnr', **kwargs)

   
   Class to calculate both the rates of lensed and unlensed events.


   :Parameters:

       **nsamples** : `int`
           number of samples for sampling.
           default nsamples = 100000.

       **npool** : `int`
           number of cores to use.
           default npool = 4.

       **z_min** : `float`
           minimum redshift.
           default z_min = 0.
           for popI_II, popIII, primordial, BNS z_min = 0., 5., 5., 0. respectively.

       **z_max** : `float`
           maximum redshift.
           default z_max = 10.
           for popI_II, popIII, primordial, BNS z_max = 10., 40., 40., 2. respectively.

       **batch_size** : `int`
           batch size for SNR calculation.
           default batch_size = 25000.
           reduce the batch size if you are getting memory error.

       **snr_finder** : `str`
           default snr_finder = 'gwsnr'.
           if 'gwsnr', the SNR will be calculated using the gwsnr package.
           if 'custom', the SNR will be calculated using a custom function.

       **kwargs** : `keyword arguments`
           Note : kwargs takes input for initializing the :class:`~ler.CompactBinaryPopulation`, :class:`LensGalaxyPopulation`, :meth:`~gwsnr_intialization`.











   .. rubric:: Examples

   - class initialization
   - ``ler`` needs `gwsnr <https://github.com/hemantaph/gwsnr/>`_.
   - generation of ``gwsnr`` snr interpolator will take time at the first initialization. The interpolator will be stored in the working dir.
   - ``m_min``, ``m_max`` were used for initializing the ``CompactBinaryPopulation`` class. ``waveform_approximant`` was used for initializing the ``snr_calculator`` (``gwsnr``) class. ``min_lensed_images`` was used for initializing the ``LensGalaxyPopulation`` class.

   >>> from ler import LeR
   >>> ler_ = LeR(nsamples=100000, npool=int(4), z_min=0., z_max=10., batch_size=25000, snr_finder='gwsnr', m_min=4.59, m_max=86.22, waveform_approximant='IMRPhenomD', min_lensed_images=2)
   Given: IMR waveform
   psds not given. Choosing bilby's default psds
   getting stored interpolator...
   In case if you need regeneration of interpolator of the given gwsnr param, please delete this file, ./interpolator_pickle/halfSNR_dict_0.pickle

   Instance Attributes
   ----------
   LeR class has the following attributes,

   +-------------------------------------+----------------------------------+
   | Atrributes                          | Type                             |
   +=====================================+==================================+
   |:attr:`~gw_param`                    |`dict`                            |
   +-------------------------------------+----------------------------------+
   |:attr:`~gw_param_detectable`         |`dict`                            |
   +-------------------------------------+----------------------------------+
   |:attr:`~lensed_param`                |`dict`                            |
   +-------------------------------------+----------------------------------+
   |:attr:`~lensed_param_detectable`     |`dict`                            |
   +-------------------------------------+----------------------------------+
   |:attr:`~gw_param_sampler_dict`       |`dict`                            |
   +-------------------------------------+----------------------------------+
   |:attr:`~lensed_param_sampler_dict`   |`dict`                            |
   +-------------------------------------+----------------------------------+
   |:attr:`~snr_calculator_dict`         |`dict`                            |
   +-------------------------------------+----------------------------------+
   |:attr:`~z_to_Dc`                     |`scipy.interpolate.interp1d`      |
   +-------------------------------------+----------------------------------+
   |:attr:`~Dc_to_z`                     |`scipy.interpolate.interp1d`      |
   +-------------------------------------+----------------------------------+
   |:attr:`~z_to_luminosity_distance`    |`scipy.interpolate.interp1d`      |
   +-------------------------------------+----------------------------------+
   |:attr:`~differential_comoving_volume`|`scipy.interpolate.interp1d`      |
   +-------------------------------------+----------------------------------+
   |:attr:`~compact_binary_pop`          |`CompactBinaryPopulation class`   |
   +-------------------------------------+----------------------------------+
   |:attr:`~lens_galaxy_pop`             |`LensGalaxyPopulation class`      |
   +-------------------------------------+----------------------------------+
   | :attr:`~snr`                        |``gwsnr`` `package`               |
   +-------------------------------------+----------------------------------+

   Instance Methods
   ----------
   LeR class has the following method(s),

   +------------------------------------+-------------------------------------+
   | Method(s)                          | Description                         |
   +====================================+=====================================+
   |:meth:`~gwsnr_intialization`        |Function for initializing the        |
   |                                    |``gwsnr`` package.                   |
   +------------------------------------+-------------------------------------+
   |:meth:`~create_lookup_tables`       |To creating lookup tables for fast   |
   |                                    |calculation for the following        |
   |                                    |conversion operations,               |
   |                                    |redshift to co-moving distance.      |
   |                                    |co-moving distance to redshift.      |
   |                                    |redshift to luminosity distance.     |
   +------------------------------------+-------------------------------------+
   |:meth:`~unlensed_cbc_statistics`    |Function to generate unlensed GW     |
   |                                    |source parameters.                   |
   +------------------------------------+-------------------------------------+
   |:meth:`~unlensed_rate`              |Function to calculate unlensed       |
   |                                    |merger rate.                         |
   +------------------------------------+-------------------------------------+
   |:meth:`~lensed_cbc_statistics`      |Function to generate lensed GW       |
   |                                    |source parameters.                   |
   +------------------------------------+-------------------------------------+
   |:meth:`~lensed_rate`                |Function to calculate lensed         |
   |                                    |merger rate.                         |
   +------------------------------------+-------------------------------------+
   |:meth:`~batch_handler`              |Function to handle the batch size.   |
   +------------------------------------+-------------------------------------+
   |:meth:`~store_ler_params`           |Fuction to store the parameters of   |
   |                                    |the LER model.                       |
   +------------------------------------+-------------------------------------+



   ..
       !! processed by numpydoc !!
   .. py:property:: gw_param

      
      ``bool``, ``dict``

      gw_param is a dictionary of unlensed parameters (source parameters)

      it will be populated when unlened_cbc_statistics() is called

      if unavailable, the unlensed parameters will be sampled when unlensed_rate() is called

      gw_param.keys() = ['m1', 'm2', 'z', 'snr', 'theta_jn', 'ra', 'dec', 'psi', 'phase', 'geocent_time']















      ..
          !! processed by numpydoc !!

   .. py:property:: gw_param_detectable

      
      ``bool``, ``dict``

      gw_param_detectable is a dictionary of unlensed parameters (source parameters)

      it will be populated when unlened_cbc_statistics() is called

      if unavailable, the unlensed parameters will be sampled when unlensed_rate() is called

      gw_param_detectable.keys() = ['m1', 'm2', 'z', 'snr', 'theta_jn', 'ra', 'dec', 'psi', 'phase', 'geocent_time']















      ..
          !! processed by numpydoc !!

   .. py:property:: lensed_param

      
      ``bool``, ``dict``

      lensed_param is a dictionary of lensed parameters

      it will be populated when lensed_cbc_statistics() is called

      if unavailable, the lensed parameters will be sampled when lensed_rate() is called

      lensed_param.keys() = ['m1', 'm2', 'z', 'snr', 'theta_jn', 'ra', 'dec', 'psi', 'phase', 'geocent_time', 'lensed_images']















      ..
          !! processed by numpydoc !!

   .. py:property:: lensed_param_detectable

      
      ``bool``, ``dict``

      lensed_param_detectable is a dictionary of lensed parameters

      it will be populated when lensed_cbc_statistics() is called

      if unavailable, the lensed parameters will be sampled when lensed_rate() is called

      lensed_param_detectable.keys() = ['m1', 'm2', 'z', 'snr', 'theta_jn', 'ra', 'dec', 'psi', 'phase', 'geocent_time', 'lensed_images']















      ..
          !! processed by numpydoc !!

   .. py:attribute:: gw_param_sampler_dict

      
      ``dict``

      dictionary of params for initializing ``CompactBinaryPopulation`` class

      this will be used for GW unlensed parameters sampling

      gw_param_sampler_dict.keys() = ['nsamples', 'm_min', 'm_max', 'z_min', 'z_max', 'event_type', 'model_pars']















      ..
          !! processed by numpydoc !!

   .. py:attribute:: lensed_param_sampler_dict

      
      ``dict``

      dictionary of params for initializing ``LensGalaxyPopulation`` class

      this will be used for GW lensed parameters sampling

      lensed_param_sampler_dict.keys() = ['nsamples', 'min_lensed_images', 'max_lensed_images', 'lensModelList']















      ..
          !! processed by numpydoc !!

   .. py:attribute:: snr_calculator_dict

      
      ``dict``

      dictionary of params for initializing ``snr_calculator`` (``gwsnr``) class

      this will be used for SNR calculation

      snr_calculator_dict.keys() = ['mtot_min', 'mtot_max', 'nsamples_mtot', 'nsamples_mass_ratio', 'sampling_frequency', 'waveform_approximant', 'minimum_frequency', 'snr_type', 'waveform_inspiral_must_be_above_fmin', 'psds', 'psd_file', 'ifos']















      ..
          !! processed by numpydoc !!

   .. py:attribute:: z_to_Dc

      
      ``scipy.interpolate.interp1d``

      redshift to co-moving distance.















      ..
          !! processed by numpydoc !!

   .. py:attribute:: Dc_to_z

      
      ``scipy.interpolate.interp1d``

      co-moving distance to redshift.















      ..
          !! processed by numpydoc !!

   .. py:attribute:: z_to_luminosity_distance

      
      ``scipy.interpolate.interp1d``

      redshift to luminosity distance.















      ..
          !! processed by numpydoc !!

   .. py:attribute:: differential_comoving_volume

      
      ``scipy.interpolate.interp1d``

      differential comoving volume.















      ..
          !! processed by numpydoc !!

   .. py:attribute:: compact_binary_pop

      
      ``CompactBinaryPopulation class``

      class for sampling GW parameters.















      ..
          !! processed by numpydoc !!

   .. py:attribute:: lens_galaxy_pop

      
      ``LensGalaxyPopulation class``

      class for sampling lensed GW parameters.















      ..
          !! processed by numpydoc !!

   .. py:attribute:: snr

      
      ``gwsnr package``

      class for calculating SNR.















      ..
          !! processed by numpydoc !!

   .. py:method:: class_initialization()

      
      Function for initializing the ``CompactBinaryPopulation`` and ``LensGalaxyPopulation`` classes.
















      ..
          !! processed by numpydoc !!

   .. py:method:: store_ler_params()

      
      Fuction to store the parameters of the LER model. This is useful for reproducing the results.
















      ..
          !! processed by numpydoc !!

   .. py:method:: gwsnr_intialization(kwargs_dict)

      
      Function for initializing the `gwsnr <https://github.com/hemantaph/gwsnr/>`_ package.


      :Parameters:

          **kwargs_dict** : 'dict'
              keyword arguments for the initialization of the `gwsnr` package.
              kwargs_dict.keys()

              ``nsamples_mtot`` : `int`
                  nsamples_mtot = 200 (recommended for accurate results)
              ``nsamples_mass_ratio`` : `int`
                  nsamples_mass_ratio = 500 (recommended for accurate results)
              ``sampling_frequency`` : `float`
                  sampling_frequency = 4096. (recommended for accurate results)
              ``waveform_approximant`` : `str`
                  waveform_approximant = "IMRPhenomD" (for BBH) or "TaylorF2" (for BNS)
                  if you want to use other approximants, please set ``snr_type`` = 'inner_product'
              ``minimum_frequency`` : `float`
                  minimum_frequency = 20. (for O3 and O4 runs) or 10. (for 3G detectors)
              ``snr_type`` : `str`
                  snr_type = 'interpolation' (for fast results) or 'inner_product' (for bilby like results)
              ``waveform_inspiral_must_be_above_fmin`` : `bool`
                  False if dont want minimum frequency cut-off as higher mass BBH can merger below that frequency.
              ``psds`` : `bool` or `dict` or `str` (txt file)
                  e.g. For O4 design sensitivity

                      psds = {'L1':'aLIGOaLIGODesignSensitivityT1800044',

                      'H1':'aLIGOaLIGODesignSensitivityT1800044',

                      'V1':'AdvVirgo'}
              ``psd_file`` : `bool`, `list`
                  psd_file = False (if ASD) or True (if PSD file)
                  psd_file = [False,True] if psds[0] is a asd and psds[1] is a psd
              ``ifos`` : `list`
                  interferometer object name list
                  ifos = ['L1', 'H1', 'V1'] (for O4 design sensitivity)

      :Returns:

          **snr_** : `the gwsnr object`
              gwsnr object is used to calculate the SNR and pdet (probability of detection)













      ..
          !! processed by numpydoc !!

   .. py:method:: create_lookup_tables(z_min, z_max)

      
      To creating lookup tables for fast calculation for the following conversion operations,

      #. redshift to co-moving distance.
      #. co-moving distance to redshift.
      #. redshift to luminosity distance.

      :Parameters:

          **z_min** : `float`
              minimum redshift.
              for popI_II, popIII, primordial, BNS z_min = 0., 5., 5., 0. respectively.

          **z_max** : `float`
              maximum redshift.
              for popI_II, popIII, primordial, BNS z_max = 10., 40., 40., 2. respectively.












      :Attributes:

          **z_to_Dc** : `scipy.interpolate.interp1d`
              redshift to co-moving distance.

          **Dc_to_z** : `scipy.interpolate.interp1d`
              co-moving distance to redshift.

          **z_to_luminosity_distance** : `scipy.interpolate.interp1d`
              redshift to luminosity distance.

          **differential_comoving_volume** : `scipy.interpolate.interp1d`
              differential comoving volume.


      ..
          !! processed by numpydoc !!

   .. py:method:: batch_handler(nsamples, sampling_routine, json_file, resume=False)

      
      Function to handle the batch size.


      :Parameters:

          **nsamples** : `int`
              number of samples.

          **sampling_routine** : `function`
              function to sample the parameters.
              e.g. unlensed_sampling_routine() or lensed_sampling_routine()

          **json_file** : `str`
              name of the json file to store the parameters.

          **resume** : `bool`
              if True, it will resume the sampling from the last batch.
              default resume = False.














      ..
          !! processed by numpydoc !!

   .. py:method:: unlensed_sampling_routine(nsamples, file_name, resume=False)

      
      Function to generate unlensed GW source parameters.


      :Parameters:

          **nsamples** : `int`
              number of samples.
              default nsamples = 100000.

          **file_name** : `str`
              name of the json file to store the parameters.

          **resume** : `bool`
              if True, it will resume the sampling from the last batch.
              default resume = False.














      ..
          !! processed by numpydoc !!

   .. py:method:: unlensed_cbc_statistics(nsamples=None, resume=False, json_file='./gw_params.json', **kwargs)

      
      Function to generate unlensed GW source parameters.


      :Parameters:

          **nsamples** : `int`
              number of samples.
              default nsamples = 100000.

          **resume** : `bool`
              resume = False (default) or True.
              if True, the function will resume from the last batch.

          **json_file** : `str`
              json file name for storing the parameters.
              default json_file = './gw_params.json'.

          **kwargs** : `dict`
              key word arguments for initializing the ``CompactBinaryPopulation`` class.

              This initialization is either done at the time of class initialization or at the time of calling this function.

              Following parameters can be provided,

              ``m_min`` : `float`
                  minimum mass of the compact binary (single).
              ``m_max`` : `float`
                  maximum mass of the compact binary (single).
              ``event_type`` : `str`
                  event_type = 'popI_II' or `popIII` or `primordial`.
              ``model_pars`` : `dict`
                  model_pars = {'alpha': 3.63, 'beta': 1.26, 'delta_m': 4.82,

                  'mmin': 4.59, 'mmax': 86.22, 'lambda_peak': 0.08,

                  'mu_g': 33.07, 'sigma_g': 5.69}}

      :Returns:

          **unlensed_gw_params** : `dict`
              dictionary of unlensed GW source parameters.
              unlensed_gw_params.keys() = ['m1', 'm2', 'z', 'snr', 'theta_jn', 'ra', 'dec', 'psi', 'phase', 'geocent_time']













      ..
          !! processed by numpydoc !!

   .. py:method:: unlensed_rate(gw_param='./gw_params.json', snr_threshold=8.0, jsonfile='./gw_params_detectable.json')

      
      Function to calculate unlensed merger rate.

      .. math::
          R_U = \mathcal{N}^U\int dz_s R_o^U(z_s)\bigg\{\Theta[\rho(z_s,\theta)-\rho_{th}] P(\theta) d\theta \bigg\}

      - where :math:`\mathcal{N}^U` is the normalization factor of the unlensed merger rate distribution wrt redshift.

      :Parameters:

          **gw_param** : `dict` or `str` for json file name.
              dictionary of unlensed GW source parameters.
              default gw_param = './gw_params.json'.

          **snr_threshold** : `float`
              SNR threshold for detection.
              default snr_threshold = 8.

          **jsonfile** : `str`
              json file name for storing the detectable parameters.
              default jsonfile = './gw_params_detectable.json'.

      :Returns:

          **unlensed_rate** : (`float`,`float`)
              unlensed merger rate in a year
              unlensed_rate[0] = total unlensed rate with step function
              unlensed_rate[1] = total unlensed rate with pdet function

          **gw_param_detectable** : `dict`
              dictionary of detectable unlensed GW source parameters.
              gw_param_detectable.keys() = ['m1', 'm2', 'z', 'snr', 'theta_jn', 'ra', 'dec', 'psi', 'phase', 'geocent_time']













      ..
          !! processed by numpydoc !!

   .. py:method:: lensed_sampling_routine(nsamples, file_name, resume=False)

      
      Function to generate lensed GW source parameters, lens galaxy parameters and image paramters.


      :Parameters:

          **nsamples** : `int`
              number of samples.

          **file_name** : `str`
              name of the json file to store the parameters.

          **resume** : `bool`
              if True, it will resume the sampling from the last batch.
              default resume = False.














      ..
          !! processed by numpydoc !!

   .. py:method:: lensed_cbc_statistics(nsamples=None, resume=False, json_file='./lensed_params.json', **kwargs)

      
      Function to generate lensed GW source parameters, lens galaxy parameters and image paramters.


      :Parameters:

          **nsamples** : `int`
              number of samples.
              default nsamples = 100000.

          **resume** : `bool`
              resume = False (default) or True.
              if True, the function will resume from the last batch.

          **json_file** : `str`
              json file name for storing the parameters.
              default json_file = './lensed_params.json'.

          **kwargs** : `dict`
              key word arguments for initializing the ``LensGalaxyPopulation`` class.

              This initialization is either done at the time of class initialization or at the time of calling this function.

              Following parameters can be provided,

              ``min_lensed_images`` : `int`
                  minimum number of lensed images.
              ``max_lensed_images`` : `int`
                  maximum number of lensed images.
              ``lensModelList`` : `list`
                  list of lens models.
                  e.g. lensModelList = ['EPL_NUMBA', 'SHEAR'].

      :Returns:

          **lensed_param** : `dict`
              dictionary of lensed GW source parameters, lens galaxy parameters and image paramters.
              lensed_param.keys() = ['zl', 'zs', 'sigma', 'q', 'e1', 'e2', 'gamma1', 'gamma2', 'Dl',
              'Ds', 'Dls', 'theta_E', 'gamma', 'mass_1', 'mass_2', 'mass_1_source', 'mass_2_source',
              'luminosity_distance', 'iota', 'psi', 'phase', 'geocent_time', 'ra', 'dec', 'n_images',
              'x0_image_positions', 'x1_image_positions', 'magnifications', 'time_delays', 'traces',
              'determinants', 'image_type', 'weights', 'opt_snr_net', 'L1', 'H1', 'V1']













      ..
          !! processed by numpydoc !!

   .. py:method:: lensed_rate(lensed_param='./lensed_params.json', snr_threshold=8.0, num_img=2, jsonfile='./lensed_params_detectable.json', none_as_nan=True)

      
      Function to calculate lensed merger rate.

      .. math::
          R_L = \mathcal{N}^L\int dz_s R_o^L(z_s)\bigg\{\Theta[\rho(z_s,\theta)-\rho_{th}] P(\theta) d\theta \bigg\}

      - where :math:`\mathcal{N}^L` is the normalization factor of the lensed merger rate distribution wrt redshift.

      :Parameters:

          **lensed_param** : `dict` or `str` for the json file name.
              dictionary of lensed GW source parameters, lens galaxy parameters and image paramters.
              lensed_param.keys() = ['zl', 'zs', 'sigma', 'q', 'e1', 'e2', 'gamma1', 'gamma2', 'Dl',
              'Ds', 'Dls', 'theta_E', 'gamma', 'mass_1', 'mass_2', 'mass_1_source', 'mass_2_source',
              'luminosity_distance', 'iota', 'psi', 'phase', 'geocent_time', 'ra', 'dec', 'n_images',
              'x0_image_positions', 'x1_image_positions', 'magnifications', 'time_delays', 'traces',
              'determinants', 'image_type', 'weights', 'opt_snr_net', 'L1', 'H1', 'V1']

          **snr_threshold** : `float`
              threshold for detection signal to noise ratio.
              e.g. snr_threshold = 8.

          **num_img** : `int`
              number of images.
              e.g. num_img = 2.

          **jsonfile** : `str`
              json file name for storing the parameters.
              default jsonfile = './lensed_params_detectable.json'.

          **none_as_nan** : `bool`
              if True, replace None with np.nan in the lensed_param dictionary.
              default none_as_nan = True.

      :Returns:

          **lensed_rate** : `float`
              lensed merger rate in a year.
              lensed_rate[0] = total lensed rate with step function
              lensed_rate[1] = total lensed rate with pdet function

          **detectable_lensed_param** : `dict`
              dictionary of detectable lensed GW source parameters, lens galaxy parameters and image paramters.
              detectable_lensed_param.keys() = ['zl', 'zs', 'sigma', 'q', 'e1', 'e2', 'gamma1', 'gamma2',
              'Dl', 'Ds', 'Dls', 'theta_E', 'gamma', 'mass_1', 'mass_2', 'mass_1_source', 'mass_2_source',
              'luminosity_distance', 'iota', 'psi', 'phase', 'geocent_time', 'ra', 'dec', 'n_images',
              'x0_image_positions', 'x1_image_positions', 'magnifications', 'time_delays', 'traces',
              'determinants', 'image_type', 'weights', 'opt_snr_net', 'L1', 'H1', 'V1']













      ..
          !! processed by numpydoc !!

   .. py:method:: rate_comparision(snr_threshold_unlensed=8.0, unlened_param='./gw_params.json', snr_threshold_lensed=8.0, num_img=2, lensed_param='./lensed_params.json', jsonfile_unlensed='./gw_params_detectable.json', jsonfile_lensed='./lensed_params_detectable.json')

      
      Function to calculate unlensed and lensed merger rate and their ratio.


      :Parameters:

          **snr_threshold_unlensed** : `float`
              threshold for detection signal to noise ratio for unlensed case.
              e.g. snr_threshold_unlensed = 8.

          **unlened_param** : `dict`
              dictionary of unlensed GW source parameters.
              unlened_param.keys() = ['m1', 'm2', 'z', 'snr', 'theta_jn', 'ra', 'dec', 'psi', 'phase', 'geocent_time']

          **snr_threshold_lensed** : `float`
              threshold for detection signal to noise ratio for lensed case.
              e.g. snr_threshold_lensed = 8.

          **num_img** : `int`
              number of images crossing the threshold.
              e.g. num_img = 2.

          **lensed_param** : `dict`
              dictionary of lensed GW source parameters, lens galaxy parameters and image paramters.
              lensed_param.keys() = ['zl', 'zs', 'sigma', 'q', 'e1', 'e2', 'gamma1', 'gamma2', 'Dl',
              'Ds', 'Dls', 'theta_E', 'gamma', 'mass_1', 'mass_2', 'mass_1_source', 'mass_2_source',
              'luminosity_distance', 'iota', 'psi', 'phase', 'geocent_time', 'ra', 'dec', 'n_images',
              'x0_image_positions', 'x1_image_positions', 'magnifications', 'time_delays', 'traces',
              'determinants', 'image_type', 'weights', 'opt_snr_net', 'L1', 'H1', 'V1']

          **jsonfile_unlensed** : `str`
              json file name for storing the parameters for unlensed detectable case.
              default jsonfile_unlensed = './gw_params_detectable.json'.

          **jsonfile_lensed** : `str`
              json file name for storing the parameters for lensed detectable case.
              default jsonfile_lensed = './lensed_params_detectable.json'.

      :Returns:

          **unlensed_rate** : (`float`,`float`)
              unlensed merger rate in a year
              unlensed_rate[0] = total unlensed rate with step function
              unlensed_rate[1] = total unlensed rate with pdet function

          **lensed_rate** : (`float`,`float`)
              lensed merger rate in a year
              lensed_rate[0] = total lensed rate with step function
              lensed_rate[1] = total lensed rate with pdet function

          **rate_ratio** : (`float`,`float`)
              unlensed/lensed rate ratio
              rate_ratio[0] = total unlensed/lensed rate ratio with step function
              rate_ratio[1] = total unlensed/lensed rate ratio with pdet function













      ..
          !! processed by numpydoc !!

   .. py:method:: selecting_n_lensed_detectable_events(nsamples=100, snr_threshold=8.0, num_img=2, resume=False, json_file='./lensed_params_detectable.json')

      
      Function to select n lensed detectable events.


      :Parameters:

          **nsamples** : `int`
              number of samples to be selected.
              default size = 100.

          **snr_threshold** : `float`
              threshold for detection signal to noise ratio.
              e.g. snr_threshold = 8. or [8.,6.]

          **num_img** : `int`
              number of images crossing the threshold.
              e.g. num_img = 2 or [1,1]

          **resume** : `bool`
              if True, it will resume the sampling from the last batch.
              default resume = False.

          **json_file** : `str`
              json file name for storing the parameters.
              default json_file = './lensed_params_detectable.json'.

      :Returns:

          **param_final** : `dict`
              dictionary of lensed GW source parameters, lens galaxy parameters and image paramters.
              param_final.keys() = ['zl', 'zs', 'sigma', 'q', 'e1', 'e2', 'gamma1', 'gamma2',
              'Dl', 'Ds', 'Dls', 'theta_E', 'gamma', 'mass_1', 'mass_2', 'mass_1_source', 'mass_2_source',
              'luminosity_distance', 'iota', 'psi', 'phase', 'geocent_time', 'ra', 'dec', 'n_images',
              'x0_image_positions', 'x1_image_positions', 'magnifications', 'time_delays', 'image_type',
              'weights', 'opt_snr_net', 'L1', 'H1', 'V1']













      ..
          !! processed by numpydoc !!

   .. py:method:: relative_mu_dt_lensed(lensed_param, snr_threshold=[8.0, 8.0])

      
      Function to classify the lensed images wrt to the morse phase difference.


      :Parameters:

          **lensed_param** : `dict`
              dictionary of lensed GW source parameters, lens galaxy parameters and image paramters.
              lensed_param.keys() = ['zl', 'zs', 'sigma', 'q', 'e1', 'e2', 'gamma1', 'gamma2', 'Dl',
              'Ds', 'Dls', 'theta_E', 'gamma', 'mass_1', 'mass_2', 'mass_1_source', 'mass_2_source',
              'luminosity_distance', 'iota', 'psi', 'phase', 'geocent_time', 'ra', 'dec', 'n_images',
              'x0_image_positions', 'x1_image_positions', 'magnifications', 'time_delays', 'traces',
              'determinants', 'image_type', 'weights', 'opt_snr_net', 'L1', 'H1', 'V1']

          **snr_threshold** : `float`
              threshold for detection signal to noise ratio.
              e.g. snr_threshold = [8.,8.] or [8.,6.] for subthreshold

      :Returns:

          **mu_rel0** : `float.array`
              relative magnification for 0 degree phase difference.

          **dt_rel0** : `float.array`
              relative time delay for 0 degree phase difference.

          **mu_rel90** : `float.array`
              relative magnification for 90 degree phase difference.

          **dt_rel90** : `float.array`
              relative time delay for 90 degree phase difference.













      ..
          !! processed by numpydoc !!

   .. py:method:: mu_vs_dt_plot(x_array, y_array, savefig=False, ax=None, colors='blue', linestyles='-', origin='upper', alpha=0.6, extent=[0.01, 500.0, 0.01, 100.0], contour_levels=[0.1, 0.4, 0.68, 0.95])

      
      Function to generate 2D KDE and plot the relative magnification vs time delay difference for lensed samples.


      :Parameters:

          **x_array** : `float.array`
              x array.

          **y_array** : `float.array`
              y array.

          **xlabel** : `str`
              x label.

          **ylabel** : `str`
              y label.

          **title** : `str`
              title.

          **savefig** : `bool`
              if True, it will save the figure.
              default savefig = False.

          **ax** : `matplotlib.axes`
              matplotlib axes.
              default ax = None.

          **colors** : `str`
              color of the plot.
              default colors = 'blue'.

          **linestyles** : `str`
              linestyle of the plot.
              default linestyles = '-'.

          **origin** : `str`
              origin of the plot.
              default origin = 'upper'.

          **alpha** : `float`
              alpha of the plot.
              default alpha = 0.6.

          **extent** : `list`
              extent of the plot.
              default extent = [1e-2,5e2,1e-2,1e2].

          **contour_levels** : `list`
              contour levels of the plot.
              default contour_levels = [0.10,0.40,0.68,0.95] which corresponds to 1,2,3,4 sigma.

      :Returns:

          None
              ..













      ..
          !! processed by numpydoc !!

   .. py:method:: selecting_n_unlensed_detectable_events(nsamples=100, snr_threshold=8.0, resume=False, json_file='./gw_params_detectable.json')

      
      Function to select n unlensed detectable events.


      :Parameters:

          **nsamples** : `int`
              number of samples to be selected.
              default size = 100.

          **snr_threshold** : `float`
              threshold for detection signal to noise ratio.
              e.g. snr_threshold = 8.

          **resume** : `bool`
              if True, it will resume the sampling from the last batch.
              default resume = False.

          **json_file** : `str`
              json file name for storing the parameters.
              default json_file = './gw_params_detectable.json'.

      :Returns:

          **param_final** : `dict`
              dictionary of unlensed GW source parameters.
              param_final.keys() = ['m1', 'm2', 'z', 'snr', 'theta_jn', 'ra', 'dec', 'psi', 'phase', 'geocent_time']













      ..
          !! processed by numpydoc !!

   .. py:method:: relative_mu_dt_unlensed(param, size=100)

      
      Function to generate relative magnification vs time delay difference for unlensed samples.


      :Parameters:

          **param** : `dict`
              dictionary of unlensed GW source parameters.
              unlensed_param.keys() = ['m1', 'm2', 'z', 'snr', 'theta_jn', 'ra', 'dec', 'psi', 'phase', 'geocent_time']

      :Returns:

          **dmu** : `float.array`
              relative magnification.

          **dt** : `float.array`
              relative time delay.













      ..
          !! processed by numpydoc !!


.. py:class:: SourceGalaxyPopulationModel(z_min=0.0, z_max=10.0, event_type='popI_II')

   
   Class to generate a population of source galaxies.
   This class is inherited by :class:`~ler.ler.CompactBinaryPopulation` class.


   :Parameters:

       **z_min** : `float`
           Minimum redshift of the source population
           default: 0.

       **z_max** : `float`
           Maximum redshift of the source population
           default: 10.

       **event_type** : `str`
           Type of event to generate
           e.g. 'popI_II', 'BNS', 'popIII', 'primordial', 'popI_II_Madau_Dickinson'
           default: 'popI_II'











   .. rubric:: Examples

   >>> from ler import SourceGalaxyPopulationModel
   >>> pop = SourceGalaxyPopulationModel(z_min=0.0001, z_max=10, event_type = "popI_II")
   >>> zs = pop.sample_source_redshifts(size=1000)
   >>> zs
   array([0.0001, 0.0001, 0.0001, ..., 9.9999, 9.9999, 9.9999])

   Instance Attributes
   ----------
   SourceGalaxyPopulationModel has the following instance attributes:

   +-------------------------------------+----------------------------------+
   | Atrributes                          | Type                             |
   +=====================================+==================================+
   |:attr:`~z_min`                       | `float`                          |
   +-------------------------------------+----------------------------------+
   |:attr:`~z_max`                       | `float`                          |
   +-------------------------------------+----------------------------------+
   |:attr:`~normalization_pdf_z`         | `float`                          |
   +-------------------------------------+----------------------------------+
   |:attr:`~z_to_luminosity_distance`    | `scipy.interpolate.interpolate`  |
   +-------------------------------------+----------------------------------+
   |:attr:`~differential_comoving_volume`| `scipy.interpolate.interpolate`  |
   +-------------------------------------+----------------------------------+

   Instance Methods
   ----------
   SourceGalaxyPopulationModel has the following instance methods:

   +-------------------------------------+----------------------------------+
   | Methods                             | Type                             |
   +=====================================+==================================+
   |:meth:`~create_lookup_table`         | Function to create a lookup      |
   |                                     | table for the differential       |
   |                                     | comoving volume and luminosity   |
   |                                     | distance wrt redshift            |
   +-------------------------------------+----------------------------------+
   |:meth:`~sample_source_redshifts`     | Function to sample source        |
   |                                     | redshifts from the source        |
   |                                     | galaxy population model          |
   +-------------------------------------+----------------------------------+
   |:meth:`~merger_rate_density_popI_II` | Function to compute the merger   |
   |                                     | rate density (PopI/PopII)        |
   +-------------------------------------+----------------------------------+
   |:meth:`~merger_rate_density_popI_II_Madau_Dickinson`                    |
   +-------------------------------------+----------------------------------+
   |                                     | Function to compute the          |
   |                                     | merger rate density (PopI/PopII) |
   |                                     | from Madau & Dickinson (2014)    |
   +-------------------------------------+----------------------------------+
   |:meth:`~merger_rate_density_popIII`  | Function to compute the merger   |
   |                                     | rate density (PopIII)            |
   +-------------------------------------+----------------------------------+
   |:meth:`~merger_rate_density_primordial`                                 |
   +-------------------------------------+----------------------------------+
   |                                     | Function to compute the merger   |
   |                                     | rate density (Primordial)        |
   +-------------------------------------+----------------------------------+



   ..
       !! processed by numpydoc !!
   .. py:attribute:: z_min

      
      ``float``

      Minimum redshift of the source population















      ..
          !! processed by numpydoc !!

   .. py:attribute:: z_max

      
      ``float``

      Maximum redshift of the source population















      ..
          !! processed by numpydoc !!

   .. py:attribute:: normalization_pdf_z

      
      ``float``

      Normalization constant of the pdf p(z)















      ..
          !! processed by numpydoc !!

   .. py:attribute:: z_to_luminosity_distance

      
      ``scipy.interpolate.interpolate``

      Function to convert redshift to luminosity distance















      ..
          !! processed by numpydoc !!

   .. py:attribute:: differential_comoving_volume

      
      ``scipy.interpolate.interpolate``

      Function to calculate the differential comoving volume















      ..
          !! processed by numpydoc !!

   .. py:method:: create_lookup_table(z_min, z_max)

      
      Function to create a lookup table for the differential comoving volume
      and luminosity distance wrt redshift.


      :Parameters:

          **z_min** : `float`
              Minimum redshift of the source population

          **z_max** : `float`
              Maximum redshift of the source population












      :Attributes:

          **z_to_luminosity_distance** : `scipy.interpolate.interpolate`
              Function to convert redshift to luminosity distance

          **differential_comoving_volume** : `scipy.interpolate.interpolate`
              Function to calculate the differential comoving volume


      ..
          !! processed by numpydoc !!

   .. py:method:: sample_source_redshifts(size=1000, z_min=0.0, z_max=10.0)

      
      Function to sample source redshifts from the source galaxy population
      model


      :Parameters:

          **size** : `int`
              Number of samples to draw

          **z_min** : `float`
              Minimum redshift of the source population

          **z_max** : `float`
              Maximum redshift of the source population

      :Returns:

          **zs** : `array`
              Array of sampled redshifts













      ..
          !! processed by numpydoc !!

   .. py:method:: merger_rate_density_popI_II(zs, R0=23.9 * 1e-09, b2=1.6, b3=2.0, b4=30)

      
      Function to compute the merger rate density (PopI/PopII)


      :Parameters:

          **zs** : `float`
              Source redshifts

          **R0** : `float`
              Normalization constant
              default: 23.9*1e-9 Mpc^-3 yr^-1

          **b2** : `float`
              Fitting paramters
              default: 1.6

          **b3** : `float`
              Fitting paramters
              default: 2.0

          **b4** : `float`
              Fitting paramters
              default: 30














      ..
          !! processed by numpydoc !!

   .. py:method:: merger_rate_density_popI_II_Madau_Dickinson(zs, af=2.7, bf=5.6, cf=1.9)

      
      Function to compute the merger rate density (PopI/PopII) from Madau & Dickinson (2014)


      :Parameters:

          **zs** : `float`
              Source redshifts

          **af** : `float`
              Fitting paramters
              default: 2.7

          **bf** : `float`
              Fitting paramters
              default: 5.6

          **cf** : `float`
              Fitting paramters
              default: 1.9

      :Returns:

          **rate_density** : `float`
              ..













      ..
          !! processed by numpydoc !!

   .. py:method:: merger_rate_density_popIII(zs, aIII=0.66, bIII=0.3, zIII=11.6)

      
      Function to compute the merger rate density (PopIII)


      :Parameters:

          **zs** : `float`
              Source redshifts

          **aIII** : `float`
              Fitting paramters
              default: 0.66

          **bIII** : `float`
              Fitting paramters
              default: 0.3

          **zIII** : `float`
              Fitting paramters
              default: 11.6

      :Returns:

          **rate_density** : `float`
              ..













      ..
          !! processed by numpydoc !!

   .. py:method:: merger_rate_density_primordial(zs, t0=13.786885302009708)

      
      Function to compute the merger rate density (Primordial)


      :Parameters:

          **zs** : `float`
              Source redshifts

          **t0** : `float`
              Present ge of the Universe in Gyr
              default: 13.786885302009708

      :Returns:

          **rate_density** : `float`
              ..













      ..
          !! processed by numpydoc !!


.. py:class:: CompactBinaryPopulation(z_min=0.0001, z_max=10, m_min=4.59, m_max=86.22, event_type='popI_II', model_pars={'alpha': 3.63, 'beta': 1.26, 'delta_m': 4.82, 'mmin': 4.59, 'mmax': 86.22, 'lambda_peak': 0.08, 'mu_g': 33.07, 'sigma_g': 5.69})

   Bases: :py:obj:`SourceGalaxyPopulationModel`

   
   Class to generate a population of compact binaries. Inherits from :class:`~ler.ler.SourceGalaxyPopulationModel` class.


   :Parameters:

       **z_min** : `float`
           Minimum redshift of the source population

       **z_max** : `float`
           Maximum redshift of the source population

       **m_min** : `float`
           Minimum mass of the BBHs

       **m_max** : `float`
           Maximum mass of the BBHs

       **event_type** : `str`
           Type of event to generate.
           e.g. 'popI_II', 'BNS', 'popIII', 'primordial', 'popI_II_Madau_Dickinson'

       **model_pars** : `dict`
           Dictionary of model parameters.
           e.g. for popI_II: {'alpha': 3.63, 'beta': 1.26, 'delta_m': 4.82, 'mmin': 4.59, 'mmax': 86.22, 'lambda_peak': 0.08, 'mu_g': 33.07, 'sigma_g': 5.69}











   .. rubric:: Examples

   >>> from ler import CompactBinaryPopulation
   >>> pop = CompactBinaryPopulation(z_min=0.0001, z_max=10, m_min=4.59, m_max=86.22, event_type = "popI_II")
   >>> gw_parameters = pop.sample_gw_parameters(nsamples=1000)
   >>> gw_parameters.keys()
   dict_keys(['mass_1', 'mass_2', 'mass_1_source', 'mass_2_source', 'zs', 'luminosity_distance', 'iota', 'psi', 'phase', 'geocent_time', 'ra', 'dec', 'a1', 'a2', 'tilt1', 'tilt2', 'phi12', 'phi_jl'])

   Instance Attributes
   ----------
   CompactBinaryPopulation has the following instance attributes:

   +-------------------------------------+----------------------------------+
   | Atrributes                          | Type                             |
   +=====================================+==================================+
   |:attr:`~z_min`                       | `float`                          |
   +-------------------------------------+----------------------------------+
   |:attr:`~z_max`                       | `float`                          |
   +-------------------------------------+----------------------------------+
   |:attr:`~m_min`                       | `float`                          |
   +-------------------------------------+----------------------------------+
   |:attr:`~m_max`                       | `float`                          |
   +-------------------------------------+----------------------------------+
   |:attr:`~event_type`                  | `str`                            |
   +-------------------------------------+----------------------------------+
   |:attr:`~model_pars`                  | `dict`                           |
   +-------------------------------------+----------------------------------+

   Instance Methods
   ----------
   CompactBinaryPopulation has the following instance methods:

   +-------------------------------------+----------------------------------+
   | Methods                             | Type                             |
   +=====================================+==================================+
   |:meth:`~sample_gw_parameters`        | Function for sampling GW         |
   |                                     | parameters from the source       |
   |                                     | galaxy population model          |
   +-------------------------------------+----------------------------------+
   |:meth:`~binary_masses_popI_II`       | Function to calculate source     |
   |                                     | mass1 and mass2 with             |
   |                                     | PowerLaw+PEAK model              |
   +-------------------------------------+----------------------------------+
   |:meth:`~binary_masses_popIII`        | Function to calculate source     |
   |                                     | mass1 and mass2 with pop III     |
   |                                     | origin                           |
   +-------------------------------------+----------------------------------+
   |:meth:`~binary_masses_primordial`    | Function to calculate source     |
   |                                     | mass1 and mass2 for primordial   |
   |                                     | BBHs                             |
   +-------------------------------------+----------------------------------+
   |:meth:`~binary_masses_BNS`           | Function to calculate source     |
   |                                     | mass1 and mass2 of BNS           |
   +-------------------------------------+----------------------------------+
   |:meth:`~mass_ratio`                  | Function to calculate mass ratio |
   +-------------------------------------+----------------------------------+



   ..
       !! processed by numpydoc !!
   .. py:attribute:: z_min

      
      ``float``

      Minimum redshift of the source population















      ..
          !! processed by numpydoc !!

   .. py:attribute:: z_max

      
      ``float``

      Maximum redshift of the source population















      ..
          !! processed by numpydoc !!

   .. py:attribute:: m_min

      
      ``float``

      Minimum mass of the BBHs















      ..
          !! processed by numpydoc !!

   .. py:attribute:: m_max

      
      ``float``

      Maximum mass of the BBHs















      ..
          !! processed by numpydoc !!

   .. py:attribute:: event_type

      
      ``str``

      Type of event to generate.

      e.g. 'popI_II', 'BNS', 'popIII', 'primordial', 'popI_II_Madau_Dickinson'















      ..
          !! processed by numpydoc !!

   .. py:attribute:: model_pars

      
      ``dict``

      Dictionary of model parameters.

      e.g. for popI_II: {'alpha': 3.63, 'beta': 1.26, 'delta_m': 4.82, 'mmin': 4.59, 'mmax': 86.22, 'lambda_peak': 0.08, 'mu_g': 33.07, 'sigma_g': 5.69}

      for popI_II_Madau_Dickinson: {'alpha': 3.63, 'beta': 1.26, 'delta_m': 4.82, 'mmin': 4.59, 'mmax': 86.22, 'lambda_peak': 0.08, 'mu_g': 33.07, 'sigma_g': 5.69}

      for popIII: None

      for primordial: {'Mc':30.,'sigma':0.3,'beta':1.1}

      for BNS: None















      ..
          !! processed by numpydoc !!

   .. py:method:: sample_gw_parameters(nsamples=1000, **kwargs)

      
      Function to sample BBH parameters from the source galaxy population
      model


      :Parameters:

          **nsamples** : `int`
              Number of samples to draw

          **kwargs** : `dict`
              Keyword arguments to pass in parameter values
              e.g. zs = np.array([0.1,0.2,0.3])

      :Returns:

          **gw_parameters** : `dict`
              Dictionary of sampled parameters
              gw_parameters.keys() = ['mass_1', 'mass_2', 'mass_1_source', 'mass_2_source', 'zs', 'luminosity_distance', 'iota', 'psi', 'phase', 'geocent_time', 'ra', 'dec', 'a1', 'a2', 'tilt1', 'tilt2', 'phi12', 'phi_jl']













      ..
          !! processed by numpydoc !!

   .. py:method:: binary_masses_popI_II(size, model_pars)

      
      Function to calculate source mass1 and mass2 with PowerLaw+PEAK model


      :Parameters:

          **size** : `int`
              Number of samples to draw

          **model_pars** : `dict`
              Dictionary of model parameters
              e.g. {'alpha': 3.63, 'beta': 1.26, 'delta_m': 4.82, 'mmin': 4.59, 'mmax': 86.22, 'lambda_peak': 0.08, 'mu_g': 33.07, 'sigma_g': 5.69}

      :Returns:

          **mass_1_source** : `array`
              Array of mass1 in source frame

          **mass_2_source** : `array`
              Array of mass2 in source frame













      ..
          !! processed by numpydoc !!

   .. py:method:: binary_masses_popIII(size, model_pars)

      
      Function to calculate source mass1 and mass2 with pop III origin


      :Parameters:

          **size** : `int`
              Number of samples to draw

          **model_pars** : `dict`
              Dictionary of model parameters

      :Returns:

          **mass_1_source** : `array`
              Array of mass1 in source frame

          **mass_2_source** : `array`
              Array of mass2 in source frame













      ..
          !! processed by numpydoc !!

   .. py:method:: binary_masses_primordial(size, model_pars={'Mc': 30.0, 'sigma': 0.3, 'beta': 1.1})

      
      Function to calculate source mass1 and mass2 for primordial BBHs


      :Parameters:

          **size** : `int`
              Number of samples to draw

          **model_pars** : `dict`
              Dictionary of model parameters
              e.g. {'Mc':30.,'sigma':0.3,'beta':1.1}

      :Returns:

          **mass_1_source** : `array`
              Array of mass1 in source frame

          **mass_2_source** : `array`
              Array of mass2 in source frame













      ..
          !! processed by numpydoc !!

   .. py:method:: binary_masses_BNS(size, model_pars)

      
      Function to calculate source mass1 and mass2 of BNS


      :Parameters:

          **size** : `int`
              Number of samples to draw

          **model_pars** : `dict`
              Dictionary of model parameters

      :Returns:

          **mass_1_source** : `array`
              Array of mass1 in source frame

          **mass_2_source** : `array`
              Array of mass2 in source frame













      ..
          !! processed by numpydoc !!

   .. py:method:: mass_ratio(size, beta=1.1)

      
      Function to calculate mass ratio with power law distribution


      :Parameters:

          **size** : `int`
              Number of samples

          **beta** : `float`
              Power law index

      :Returns:

          **q** : `array`
              Array of mass ratio













      ..
          !! processed by numpydoc !!


.. py:function:: solve_lens_equation1(lens_parameters)

   
   Function to solve the lens equation (min_image = 2)
   Input parameters:
       lens_parameters : a list of parameters
                       lens_parameters[0] = e1 : ellipticity
                       lens_parameters[1] = e2 : ellipticity
                       lens_parameters[2] = gamma : power-law index
                       lens_parameters[3] = gamma1 : shear
                       lens_parameters[4] = gamma2 : shear
                       lens_parameters[5] = zl : redshift of the lens
                       lens_parameters[6] = zs : redshift of the source
                       lens_parameters[7] = einstein_radius : Einstein radius
                       lens_parameters[8] = iteration : iteration number
                       lens_parameters[9:] = lens_model_list : list of lens models
   Output parameters:
       x_source : x position of the source in the source plane
       y_source : y position of the source in the source plane
       eta : polar coordinate of the source in the source plane
       phi : polar coordinate of the source in the source plane
       x0_image_position : x position of the images in the source plane
       x1_image_position : y position of the images in the source plane
       magnifications : magnification of the images
       time_delays : time-delay of the images
       nImages : number of images
       determinant : determinant of the hessian matrix
       trace : trace of the hessian matrix
       iteration : iteration number
       weights : weights for the caustic
















   ..
       !! processed by numpydoc !!

.. py:function:: solve_lens_equation2(lens_parameters)

   
   Function to solve the lens equation (min_image > 2)
   Input parameters:
       lens_parameters : a list of parameters
                       lens_parameters[0] = e1 : ellipticity
                       lens_parameters[1] = e2 : ellipticity
                       lens_parameters[2] = gamma : power-law index
                       lens_parameters[3] = gamma1 : shear
                       lens_parameters[4] = gamma2 : shear
                       lens_parameters[5] = zl : redshift of the lens
                       lens_parameters[6] = zs : redshift of the source
                       lens_parameters[7] = einstein_radius : Einstein radius
                       lens_parameters[8] = iteration : iteration number
                       lens_parameters[9:] = lens_model_list : list of lens models
   Output parameters:
       x_source : x position of the source in the source plane
       y_source : y position of the source in the source plane
       eta : polar coordinate of the source in the source plane
       phi : polar coordinate of the source in the source plane
       x0_image_position : x position of the images in the source plane
       x1_image_position : y position of the images in the source plane
       magnifications : magnification of the images
       time_delays : time-delay of the images
       nImages : number of images
       determinant : determinant of the hessian matrix
       trace : trace of the hessian matrix
       iteration : iteration number
       weights : weights for the caustic
















   ..
       !! processed by numpydoc !!

.. py:function:: add_dictionaries_together(dictionary1, dictionary2)

   
   Adds two dictionaries with the same keys together.
















   ..
       !! processed by numpydoc !!

.. py:function:: rejection_sample(pdf, xmin, xmax, size=100)

   
   Helper function for rejection sampling from a pdf with maximum and minimum arguments.
   Input parameters:
       pdf: the pdf to sample from
       xmin: the minimum argument of the pdf
       xmax: the maximum argument of the pdf
       size: the number of samples to draw
   Output:
       samples: the samples drawn from the pdf
















   ..
       !! processed by numpydoc !!

