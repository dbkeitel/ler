:orphan:

:py:mod:`ler.ler`
=================

.. py:module:: ler.ler


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ler.ler.LeR
   ler.ler.NumpyEncoder




.. py:class:: LeR(nsamples=1000, npool=int(4), z_min=0.0, z_max=10.0, batch_size=50000, snr_finder='gwsnr', **kwargs)

   
   Class to calculate both the rates of lensed and unlensed events
















   ..
       !! processed by numpydoc !!
   .. py:method:: store_ler_params()

      
      function to store the parameters of the LER model
      Input parameters:
          None
      Output parameters:
          None
















      ..
          !! processed by numpydoc !!

   .. py:method:: gwsnr_intialization(kwargs_snr_function)

      
      function for initializing the gwsnr package
      Input parameters:
          kwargs_snr_function: keyword arguments for the SNR function
      Output Parameters:
          snr_: the gwsnr object
                  gwsnr object is used to calculate the SNR and pdet (probability of detection)
















      ..
          !! processed by numpydoc !!

   .. py:method:: create_lookup_tables(z_min, z_max)

      
      function for creating lookup tables for fast calculation
      Intput Parameters:
          z_min: minimum redshift
          z_max: maximum redshift
      Output Parameters:
          None
















      ..
          !! processed by numpydoc !!

   .. py:method:: unlensed_cbc_statistics(nsamples=False, jsonfile=True, **kwargs)

      
      function to generate unlensed GW source parameters
      Intput Parameters:
          nsamples: number of samples
          snr_threshold: snr threshold of detection
          jsonfile: if True, store all gravitational waves source parameters in json file 
                      (for all sources, detected and undetected)
          kwargs: if new paramteres are provided, it will be used for sampling source parameters
      Output Parameters:
          unlensed_gw_params: dictionary of unlensed GW source parameters
















      ..
          !! processed by numpydoc !!

   .. py:method:: unlensed_rate(size=False, snr_threshold=8.0, jsonfile=True)

      
      function to calculate unlensed merger rate
      Intput Parameters:
          size: number of samples
          snr_threshold: threshold for detection signal to noise ratio
          jsonfile: if True, store all gravitational waves source parameters in json file 
                      (for detected sources)
      Output Parameters:
          unlensed_rate: unlensed merger rate in yr^-1
















      ..
          !! processed by numpydoc !!

   .. py:method:: lensed_cbc_statistics(nsamples=False, jsonfile=True, **kwargs)

      
      function to generate lensed GW source parameters, lens parameters and image parameters
      Intput Parameters:
          nsamples: number of samples
          snr_threshold: threshold for detection signal to noise ratio
          jsonfile: if True, store lensed GW source parameters, lens parameters and image parameters in json file
                      (both for detected and undetected sources)
          **kwargs: if new parameters are provided, it will be used for sampling
      Output Parameters:
          lensed_param: dictionary of lensed GW source parameters, lens parameters and image parameters
















      ..
          !! processed by numpydoc !!

   .. py:method:: lensed_rate(size=False, snr_threshold=8.0, num_img=2, jsonfile=True, none_as_nan=True)

      
      Function to calculate detectable lensed merger rate
      Intput Parameters:
          size (int): number of samples
          snr_threshold (float/array): threshold for detection signal to noise ratio
          num_img (int/array): number of images
                              e.g. For Sub-thershold events, snr_threshold=[8.,6.], num_img=[1,1]
                              The event will contain 1 image with snr>8 and 1 image with snr>6
          jsonfile (bool): if True, store all gravitational waves source parameters in json file
          none_as_nan (bool): if True,  no value is kept as np.nan
                              if False, no value is kept as 0.
      Output Parameters:
          lensed_rate (float): lensed merger rate in yr^-1
















      ..
          !! processed by numpydoc !!

   .. py:method:: selecting_n_lensed_detectable_events_from_dict(snr_threshold=8.0, num_img=2, none_as_nan=True, lenstype='I')

      
      Function to select n lensed detectable events from self.lensed_param
      Input Parameters:
          snr_threshold (float/array): threshold for detection signal to noise ratio
          num_img (int/array): number of images
                              e.g. For Sub-thershold events, snr_threshold=[8.,6.], num_img=[1,1]
                              The event will contain 1 image with snr>8 and 1 image with snr>6
          none_as_nan (bool): if True,  no value is kept as np.nan
                              if False, no value is kept as 0.
          lenstype (str): lens type, 'I' or 'II'  
      Output Parameters:
          lensed_param (dict): dictionary of lensed parameters
















      ..
          !! processed by numpydoc !!

   .. py:method:: selecting_n_lensed_detectable_events_with_sampling(snr_threshold=8.0, num_img=2, none_as_nan=True, size=100, lenstype='I', min_img=2, max_img=4)

      
      Function to select n lensed detectable events with sampling
















      ..
          !! processed by numpydoc !!

   .. py:method:: selecting_n_unlensed_detectable_events_from_dict(snr_threshold=8.0)

      
      Function to select n lensed detectable events from self.gw_param
















      ..
          !! processed by numpydoc !!

   .. py:method:: selecting_n_unlensed_detectable_events_with_sampling(snr_threshold=8.0, size=100)

      
      Function to select n lensed detectable events with sampling
















      ..
          !! processed by numpydoc !!

   .. py:method:: selecting_n_detectable_events(snr_threshold=8.0, num_img=2, none_as_nan=True, lensed=True, jsonfile=True, lenstype='I', new=False, size=100, min_img=2, max_img=4, batch_size=10000, **kwargs)

      
      Function to select n detectable events
      Input parameters:
          snr_threshold (float): the threshold for the SNR
          num_img (int): the number of images
          none_as_nan (bool): if True, then replace None with np.nan
          lensed (bool): if True, then select lensed events
          jsonfile (bool): if True, then save the dictionary as a json file
          lenstype (str): the lens type
                          e.g. 'I' for image type I, 'II' for image type II, 'III' for image type III, 'any' for any type
          new (bool): if True, then sample new events
          size (int): the number of events to be sampled
          min_img (int): the minimum number of images
          max_img (int): the maximum number of images
          batch_size (int): the number of events to be sampled in each iteration
      Output parameters:
          param (dict): the dictionary containing the parameters of the selected events
















      ..
          !! processed by numpydoc !!

   .. py:method:: rate_comparision(size=False, snr_threshold=8.0, num_img=2, jsonfile=True, none_as_nan=True)

      
      Function to compare the detectable lensed merger rate with the unlensed merger rate
      Intput Parameters:
          size (int): number of samples
          snr_threshold (float/array): threshold for detection signal to noise ratio
          num_img (int/array): number of images
                              e.g. For Sub-thershold events, snr_threshold=[8.,6.], num_img=[1,1]
                              The event will contain 1 image with snr>8 and 1 image with snr>6
          jsonfile (bool): if True, store all gravitational waves source parameters in json file
          none_as_nan (bool): if True,  no value is kept as np.nan
                              if False, no value is kept as 0.
      Output Parameters:
          unlened_rate (float): unlensed merger rate in yr^-1
          lensed_rate (float): lensed merger rate in yr^-1
          rate_ratio (float): lensed/unlensed merger rate ratio
















      ..
          !! processed by numpydoc !!


.. py:class:: NumpyEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)

   Bases: :py:obj:`json.JSONEncoder`

   
   class for storing a numpy.ndarray or any nested-list composition as JSON file
















   ..
       !! processed by numpydoc !!
   .. py:method:: default(obj)

      
      Implement this method in a subclass such that it returns
      a serializable object for ``o``, or calls the base implementation
      (to raise a ``TypeError``).

      For example, to support arbitrary iterators, you could
      implement default like this::

          def default(self, o):
              try:
                  iterable = iter(o)
              except TypeError:
                  pass
              else:
                  return list(iterable)
              # Let the base class default method raise the TypeError
              return JSONEncoder.default(self, o)















      ..
          !! processed by numpydoc !!


